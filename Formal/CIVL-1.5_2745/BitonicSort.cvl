

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "mpi.h"
#include "omp.h"
#include <civlc.cvh>
#include <civl-mpi.cvh>
#include <civl-omp.cvh>
#include <seq.cvh>

#define ARRAYSIZE 6


//---- Part of MPI-Transformer -----

void $seq_init(void* array, int count, void* value);

$input int _gen_argc ;
$input char _gen_argv[10][];

$input int _mpi_nprocs ;
$input int _mpi_nprocs_lo = 1 ;
$input int _mpi_nprocs_hi ;


$assume((_mpi_nprocs_lo <= _mpi_nprocs) && (_mpi_nprocs <= _mpi_nprocs_hi)) ;

$mpi_gcomm _mpi_gcomm = $mpi_gcomm_create($here, _mpi_nprocs);
$mpi_gcomm _mpi_gcomms[] ;

$seq_init(&(_mpi_gcomms), 1, &(_mpi_gcomm)) ;

void _mpi_process( int _mpi_rank)
{
  //--- Required by civl ----
  $mpi_sys_status _mpi_status = __UNINIT ;
  $assert(_mpi_status == __UNINIT) ;
  MPI_Comm MPI_COMM_WORLD = $mpi_comm_create($here, _mpi_gcomm, _mpi_rank);
  void $assume(_Bool expression);
  $assume((0 < _gen_argc) && (_gen_argc < 10)) ;
  $scope _gen_root = $here ;
  //----- Start your own code transformation ----
  int findPartner( int rank, int index)
  {
    int quot = rank ;
	int res = quot%2;
	int j=0 ;
	while(j<=index)
	{
	  res = quot%2 ;
	  quot = quot/2 ;
	  j = j+1 ;
	}
	int amount = 1;
	for(int k=1; k<j; k++)
	{
	  amount = amount * 2 ;
	}
	//printf("Amount = %d\n",amount);
	if(rank==5 && index==1)
		printf("Res = %d, quo= %d\n", res, quot);
	if(res==0) return rank + amount ;
	else return rank - amount ;
  }
   int log2ceil(int N)
   {
     int quot = N;
     int res = 0;
     int count =0 ;
     int index=0 ;
     while(quot!=0)
     {
       // printf("Quot = %d\n", quot);
        res = quot%2 ;
   	 quot = quot/2 ;
   	 if(res==1) count = count + 1 ;
   	 if(quot==0) {
   	   if(count==1) return index ;
   	   else return index+1 ;
   	 }
   	 else index = index + 1 ;
     }
     return index ;
   }

  typedef struct DiArrays {
    int N1 ;
	int N2 ;
  } Darr ;

  $abstract int rand_work( unsigned seed );
  int _rand_count = 0;
  int rand()
  {
    _rand_count = _rand_count + 1 ;
	return rand_work(_rand_count) ;
  }

  void reverse_split( int* b, int N)
  {
    int temp ;
	int residue = N%2 ;
	int i=0;
	for(; i<N/2; i = i+1)
	{
	  if(b[i] < b[N/2 + residue + i])
	  {
	    temp = b[i] ;
		b[i] = b[N/2 + residue + i] ;
		b[N/2 + residue + i] = temp ;
	  }
	  if(residue==1 && b[N/2] < b[N/2 + residue + i])
	  {
	    temp = b[N/2] ;
		b[N/2] = b[N/2 + residue+i];
		b[N/2 + residue+i] = temp ;
	  }
	}
	if(residue==1 && b[N/2] < b[N/2 + 1])
	{
	  temp = b[N/2] ;
	  b[N/2] = b[N/2 + 1];
	  b[N/2 + 1] = temp ;
	}
  }

  void split( int* b, int N)
  {
    //Darr b12 ;
	//b12.N1 = N/2 ;
	//b12.N2 = N - N/2 ;
	 int temp ;
	 int residue = N%2 ;
	 int i=0;
	 for(; i<N/2; i = i+1)
	 {
	    if(b[i] > b[N/2 + residue + i])
	    {
	      temp = b[i] ;
	     b[i] = b[N/2 + residue + i] ;
	     b[N/2 + residue + i] = temp ;
	     if(residue==1 && b[i] > b[N/2])
	     {
	       temp = b[i] ;
	       b[i] = b[N/2] ;
	       b[N/2] = temp ;
	     }
	    }
	 }
	 if(residue==1 && (b[N/2 - 1] > b[N/2]))
	 {
	   temp = b[N/2 - 1];
	   b[N/2 - 1] = b[N/2] ;
	   b[N/2] = temp ;
	 }
	//return b12 ;
  }

  int ReverseSortBitonic( int* b, int N)
  {
    if(N==1) return 1 ;
	reverse_split(b, N);
	ReverseSortBitonic(b, N/2);
	ReverseSortBitonic(&b[N/2], N - N/2);
    return 1 ;
  }

  int SortBitonic( int* b, int N)
  {
    if (N==1) return 1 ;
	split(b, N);
	 SortBitonic(b, N/2);
	 SortBitonic(&(b[N/2]), N - N/2);
    return 1 ;
  }

  void MergeBitonic( int* b1, int* b2, int N1, int N2)
  {
     SortBitonic(b1, N1);
	 ReverseSortBitonic(b2, N2);
  }

  int* MakeBitonic( int* seq, int N)
  {
    int* seq1 = seq ;
	int* seq2 = &(seq[N/2]);
	if(N > 4)
	{
	  MakeBitonic(seq1, N/2);
	  MakeBitonic(seq2, N-N/2);
	}
	MergeBitonic(seq1, seq2, N/2, N-N/2);
	return seq1 ;
  }


   void bitonicSearch( int* buffer, size_t N, size_t size, int numProcs, MPI_Comm comm, int rank)
   {
     int r = N/numProcs ;
	 if(r > 1)
	   MakeBitonic(&buffer[rank*r], r);

	 $assume(numProcs > 1) ;
	 int dim = log2ceil(numProcs);
	 $assert( (dim > 0) && (dim < numProcs));
	 int comm_partner ;
	 int mysize = r ;
	 int partnersize = r ;
	 $assume( (0 < dim) && (dim < 4));

	 for(int j=0; j<dim ; j++)
	 {
	     comm_partner = findPartner(rank, j);
		 if(rank==5)
		 {
		   printf("J = %d Rank = %d partner = %d\n", j, rank, comm_partner);
		 }
		 MPI_Status status ;
		  if(rank < numProcs && comm_partner < numProcs)
		  {
		    if(rank < comm_partner)
		    {
		     // MPI_Send(&(mysize), 1, MPI_INT, comm_partner, 1, comm);
		      MPI_Recv(&(partnersize), 1, MPI_INT, comm_partner, 1, comm, &(status));
		    //  MPI_Send(&(buffer[rank*r]), mysize, MPI_INT, comm_partner, 1, comm);
		      MPI_Recv(&(buffer[comm_partner*r]), partnersize, MPI_INT, comm_partner, 1, comm, &status) ;
		    }
		    else if(rank > comm_partner)
		    {
		     // MPI_Recv(&(partnersize), 1, MPI_INT, comm_partner, 1, comm, &status);
		      MPI_Send(&(mysize), 1, MPI_INT, comm_partner, 1, comm) ;
		     // MPI_Recv(&(buffer[comm_partner*r]), partnersize, MPI_INT, comm_partner, 1, comm, &status) ;
		      MPI_Send(&(buffer[rank*r]), mysize, MPI_INT, comm_partner, 1, comm) ;
		    }
		    //--- Do the compare and exchange ---
		    if(rank < comm_partner)
		    {
		      int* seq1 = &(buffer[rank*r]);
		      int* seq2 = &(buffer[comm_partner*r]);
		      MergeBitonic(seq1, seq2, mysize, partnersize);
		      mysize = mysize + partnersize ;
		    }
		  }
	 }
	 if(rank==0)
	 {
	   SortBitonic(buffer, N);
	 }
	 MPI_Bcast(buffer, N, MPI_INT, 0, comm);
	 MPI_Barrier(comm);
   }



   

  void BitonicDriver( int N, int numProcs, MPI_Comm comm, int rank )
  {
   // int* buffer = (int*)malloc(sizeof(int)*N) ;
   int* buffer = (int*)($malloc($here, sizeof(int)*N)) ;
   int r = N/numProcs ;
   //--- Initialize with random numbers ---
   if(rank==0)
   {
     //for(int k=0; k<N; k++)  buffer[k] = rand()%71 ;
     printf("UnSorted Array---\n");
     for(int k=0; k<N; k++) {
	    buffer[k] = (k*71)%(2*k+7) ;
		printf("%d ", buffer[k]);
     }
   }
   MPI_Bcast(buffer, N, MPI_INT, 0, comm);
   MPI_Barrier(comm);
   bitonicSearch(buffer, N, sizeof(int), numProcs, comm, rank);
     printf("Sorted Array---\n");
     for(int k=0; k<N; k++) 
		printf("%d ", buffer[k]);

   $free(buffer) ;
  }

  int _gen_main(int argc, char* argv[])
  {
     int numProcs;
	 int rank ;
	 int N ;
	 $mpi_init();
	 MPI_Comm_size(MPI_COMM_WORLD, &(numProcs));
	 MPI_Comm_rank(MPI_COMM_WORLD, &(rank));
	 MPI_Comm comm = MPI_COMM_WORLD ;
	 N = ARRAYSIZE ;

	 $assert(N>0) ;
	 BitonicDriver(N*numProcs, numProcs, comm, rank); 

	 $mpi_finalize();
  }

  //--- Required By civl to fork of processes ---
  {
     char* _gen_argv_temp[10] ;
	 {
	   int i=0;
	   for(; i<10; i=i+1)
	     _gen_argv_temp[i] = &(_gen_argv[i][0]);
	 }
	 _gen_main(_gen_argc, &(_gen_argv_temp[0]));
  }
  $mpi_comm_destroy(MPI_COMM_WORLD);

}

int main()
{
  $parfor(int i:0 .. _mpi_nprocs - 1)
    _mpi_process(i);
  $mpi_gcomm_destroy(_mpi_gcomm);
}
