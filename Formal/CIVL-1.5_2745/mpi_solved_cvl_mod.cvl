
#include "mpi.h"
#include <stdio.h>
#include <stdlib.h>

#include <civlc.cvh>
#include <civl-mpi.cvh>
#include <seq.cvh>


//------ argc, argv as inputs ------
$input int _gen_argc ;
$input char _gen_argv[10][];

//------ The MPI transformer part --------

$input int _mpi_nprocs; // value given from command line
$input int _mpi_nprocs_lo = 1; 
$input int _mpi_nprocs_hi;

$assume (( _mpi_nprocs_lo <= _mpi_nprocs) && (_mpi_nprocs >= _mpi_nprocs_hi)) ;

$mpi_gcomm _mpi_gcomm = $mpi_gcomm_create($here, _mpi_nprocs);
      //--- $here exists in every scope and refers to the dynamic scope in which it is contained

$mpi_gcomm _mpi_gcomms[] ;
$seq_init(&(_mpi_gcomms), 1, &(_mpi_gcomm)); // check if this is required

//--- Actual transformation of the mpi-code ----

void _mpi_process( int _mpi_rank) //-- This process will get spawned
{
   $mpi_sys_status _mpi_status = __UNINIT ;
   $assert(_mpi_status==__UNINIT);

   MPI_Comm MPI_COMM_WORLD = $mpi_comm_create($here, _mpi_gcomm, _mpi_rank);

   void $assume(_Bool expression);
   $assume((0 < _gen_argc) && (_gen_argc < 10));

   int _gen_main(int argc, char* argv[])
   {
     int numtasks ;
	 int rank ;
	 int dest;
	 int tag ;
	 int source ;
	 int rc ;
	 int count ;
	 char inmsg ;
	 char outmsg = 'x' ;
	 MPI_Status Stat ;

	 $mpi_init() ; //---Replaces MPI_Init
	 MPI_Comm_size(MPI_COMM_WORLD, &(numtasks));
	 MPI_Comm_rank(MPI_COMM_WORLD, &(rank));
	 if(rank==0)
	 {
	   dest = rank + 1 ;
	   source = dest;
	   tag = rank;
	   rc = MPI_Send(&(outmsg), 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
	   rc = MPI_Recv(&(inmsg), 1, MPI_CHAR, source, rank+1, MPI_COMM_WORLD, &(Stat));
	 }
	 else if(rank==1)
	 {
	   dest = rank - 1;
	   source = dest;
	   tag = rank;
	   rc = MPI_Recv(&(inmsg), 1, MPI_CHAR, source, rank-1, MPI_COMM_WORLD, &(Stat));
	   rc = MPI_Send(&(outmsg), 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
	 }
	 if(rank < 2)
	 {
	   rc = MPI_Get_count(&(Stat), MPI_CHAR, &(count)) ;
	 }
	 $mpi_finalize() ; //---Replaces MPI_Finalize
   }
     {

     char* _gen_argv_tmp[10];
	 {
	   int i=0;
	   for(; i<10; i=i+1)
	      _gen_argv_tmp[i] = &(_gen_argv[i][0]) ;
	 }
	 //--- call _gen_main ----
	 _gen_main(_gen_argc, &(_gen_argv_tmp[0]));
	 }

  $mpi_comm_destroy(MPI_COMM_WORLD) ;

}

int main()
{
  $parfor(int i:0 .. _mpi_nprocs - 1)
    _mpi_process(i);
  
  $mpi_gcomm_destroy(_mpi_gcomm);
}


